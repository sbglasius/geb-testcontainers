apply plugin: 'maven-publish'
apply plugin: 'signing'

task sourcesJar(type: Jar) {
    archiveClassifier.set 'sources'
    from sourceSets.main.allGroovy
}

task javadocJar(type: Jar) {
    dependsOn javadoc, groovydoc
    archiveClassifier.set 'javadoc'
    from javadoc.destinationDir
    from groovydoc.destinationDir
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'geb-testcontainers'
            version = project.version

            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'GEB-testcontainers'
                description = 'A small library with a container Webdriver, and the needed code to use it with GebSpec'
                url = 'https://github.com/sbglasius/geb-testcontainers'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'sbglasius'
                        name = 'SÃ¸ren Berg Glasius'
                        email = 'soeren@glasius.dk'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/sbglasius/geb-testcontainers.git'
                    developerConnection = 'scm:git:ssh:github.com:sbglasius/geb-testcontainers.git'
                    url = 'https://github.com/sbglasius/geb-testcontainers/'
                }
            }
        }
    }
}

ext."signing.keyId" = project.hasProperty('signing.keyId') ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY_ID')
ext."signing.password" = project.hasProperty('signing.password') ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.hasProperty('signing.secretKeyRingFile') ? project.getProperty('signing.secretKeyRingFile') : (System.getenv('SIGNING_PASSPHRASE') ?: "${System.properties['user.home']}/.gnupg/secring.gpg")

ext.isReleaseVersion = !version.endsWith('SNAPSHOT')

afterEvaluate {
    signing {
        required { isReleaseVersion }
        if(System.getenv('SIGNING_PRIVATE_KEY') && System.getenv('SIGNING_PASSWORD')) {
            useInMemoryPgpKeys(System.getenv('SIGNING_PRIVATE_KEY'), System.getenv('SIGNING_PASSWORD') )
        }
        sign publishing.publications.maven
    }
}
